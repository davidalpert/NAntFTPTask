<?xml version="1.0" encoding="utf-8"?>
<project name="ftptask" default="build">
  <description>SharpDevelop generated NAnt 0.85 build file.</description>
  <target name="subwcrev">
	<exec program="subwcrev"
	      commandline=". AssemblyInfo.subwcrev AssemblyInfo.cs" />
  </target>
  <!--Set debug property if not set-->
  <ifnot test="${property::exists('debug')}">
    <property name="debug" value="false" />
  </ifnot>
  <!--The 'init' target.  Creates folders needed for the build.-->
  <target name="init" depends="init.debug, init.release" />
  <!--The 'clean' target.  Removes compiled output.-->
  <target name="clean" depends="clean.debug, clean.release" />
  <!--The 'gacreferences' target.-->
  <target name="gacreferences" depends="gacreferences.debug, gacreferences.release" />
  <!--The 'build' target.-->
  <target name="build" depends="build.debug, build.release" />
  <!--The 'test' target.-->
  <target name="test" depends="test.debug, test.release" />
  <!--Set up various properties that will be referred to in the various nant targets.-->
  <!--The output directory.-->
  <property name="outputdir.debug" value=".\bin\Debug">
  </property>
  <!--The name of the assembly.-->
  <property name="assembly.debug" value="ftptask">
  </property>
  <!--The output file's extension.-->
  <property name="extension.debug" value="dll">
  </property>
  <!--The initialisation target.-->
  <target name="init.debug" if="${debug}">
    <mkdir dir="${outputdir.debug}" />
  </target>
  <!--The 'clean' target.  Here we delete the built output files and extra files which are not directly specified in 
		      the .prjx file (e.g. ".pdb", ".xml", ".manifest").-->
  <target name="clean.debug" if="${debug}">
    <delete>
      <fileset>
        <include name="${outputdir.debug}\${assembly.debug}.${extension.debug}" />
        <include name="${outputdir.debug}\${assembly.debug}.pdb" />
        <include name="${outputdir.debug}\${assembly.debug}.xml" />
        <include name="${outputdir.debug}\${assembly.debug}.${extension.debug}.manifest" />
        <include name="${outputdir.debug}\*.config" />
      </fileset>
    </delete>
  </target>
  <!--The 'build' target.-->
  <target name="build.debug" depends="init.debug, gacreferences.debug" if="${debug}">
    <!--Compiles the code -->
    <csc target="library" output="${outputdir.debug}\${assembly.debug}.${extension.debug}" warninglevel="4" debug="True" optimize="False" unsafe="False" checked="True" noconfig="False" nostdlib="False" define="DEBUG" warnaserror="False">
      <sources>
        <include name=".\AssemblyInfo.cs" />
        <include name=".\Tasks\ftptask.cs" />
        <include name=".\Types" />
        <include name=".\Tasks" />
        <include name=".\Types\Connection.cs" />
      </sources>
      <references>
        <include name="c:\usr\local\nant-0.85-rc1\bin\NAnt.Core.dll" />
        <include name=".\lib\edtftpnet-1.1.3.dll" />
      </references>
    </csc>
    <!--Copy app.config file to output folder and rename it appropriately -->
  </target>
  <!--The test target.  Only supports Nunit 2 -->
  <target name="test.debug" depends="build.debug" if="${debug}">
    <nunit2>
      <formatter type="Plain" />
      <test assemblyname="${outputdir.debug}\${assembly.debug}.${extension.debug}" appconfig="${outputdir.debug}\${assembly.debug}.${extension.debug}.config" />
    </nunit2>
  </target>
  <!--Generates a property for each Gac reference.  The property name is set to the name of the assembly-->
  <target name="gacreferences.debug" if="${debug}">
  </target>
  <!--Set up various properties that will be referred to in the various nant targets.-->
  <!--The output directory.-->
  <property name="outputdir.release" value=".\bin\Release">
  </property>
  <!--The name of the assembly.-->
  <property name="assembly.release" value="ftptask">
  </property>
  <!--The output file's extension.-->
  <property name="extension.release" value="exe">
  </property>
  <!--The initialisation target.-->
  <target name="init.release" unless="${debug}">
    <mkdir dir="${outputdir.release}" />
  </target>
  <!--The 'clean' target.  Here we delete the built output files and extra files which are not directly specified in 
		      the .prjx file (e.g. ".pdb", ".xml", ".manifest").-->
  <target name="clean.release" unless="${debug}">
    <delete>
      <fileset>
        <include name="${outputdir.release}\${assembly.release}.${extension.release}" />
        <include name="${outputdir.release}\${assembly.release}.pdb" />
        <include name="${outputdir.release}\${assembly.release}.xml" />
        <include name="${outputdir.release}\${assembly.release}.${extension.release}.manifest" />
        <include name="${outputdir.release}\*.config" />
      </fileset>
    </delete>
  </target>
  <!--The 'build' target.-->
  <target name="build.release" depends="subwcrev, init.release, gacreferences.release" unless="${debug}">
    <!--Compiles the code -->
    <csc target="exe" output="${outputdir.release}\${assembly.release}.${extension.release}" warninglevel="4" debug="False" optimize="True" unsafe="False" checked="False" noconfig="False" nostdlib="False" define="" warnaserror="False">
      <sources>
        <include name=".\AssemblyInfo.cs" />
        <include name=".\Tasks\ftptask.cs" />
        <include name=".\Types" />
        <include name=".\Tasks" />
        <include name=".\Types\Connection.cs" />
      </sources>
      <references>
        <include name="c:\usr\local\nant-0.85-rc1\bin\NAnt.Core.dll" />
        <include name=".\lib\edtftpnet-1.1.3.dll" />
      </references>
    </csc>
    <!--Copy app.config file to output folder and rename it appropriately -->
  </target>
  <!--The test target.  Only supports Nunit 2 -->
  <target name="test.release" depends="build.release" unless="${debug}">
  </target>
  <!--Generates a property for each Gac reference.  The property name is set to the name of the assembly-->
  <target name="gacreferences.release" unless="${debug}">
  </target>
</project>
